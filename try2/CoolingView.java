
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package try2;


/**
 *
 * @author kq635
 */
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import java.util.List;

public class CoolingView extends BaseView {

    private JLabel coolingTypeHeader;
    private JButton fetchDetailsButton, recommendationButton;
    private JFrame recommendationFrame;
    private JTextArea recommendationText, infoText;
    private JTable coolingTable;
    private boolean fetched = false;

    // Creates a CoolingView to display cooling details.
    public CoolingView() {
        super();
        initializeFrame("Cooling Details");
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        // Creating new objects
        coolingTypeHeader = new JLabel("Cooling Type: ");
        infoText = new JTextArea("Cooling devices dissipate the heat generated by computer components.", 5, 30);
        infoText.setEditable(false);
        fetchDetailsButton = new JButton("Fetch Cooling Details");
        recommendationButton = new JButton("Show Recommendation");

        // Adding actions to recommendation button and also setting bounds for the back button
        recommendationButton.addActionListener(e -> showRecommendation());
        goBackButton.setText("<");
        goBackButton.setBounds(10, 10, 45, 30);
        frame.add(goBackButton);

        panel.add(Box.createVerticalStrut(40));  // Adding vertical space
        panel.add(infoText);
        panel.add(coolingTypeHeader);
        panel.add(fetchDetailsButton);
        panel.add(recommendationButton);

        frame.add(panel);
        frame.setVisible(true); // for visibility
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                frame.setVisible(false);
                goBackButton.doClick(); // Simulate a click on the go back button when closing the window
            }
        });
    }

    // Adds a listener to the "Fetch Details" button, ensuring it's executed only once.
    public void addFetchDetailsButtonListener(ActionListener listener) {
        fetchDetailsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!fetched) { // Check if the button hasn't been pressed before
                    listener.actionPerformed(e); // Execute the listener
                    fetched = true; // Update the fetched state
                    fetchDetailsButton.setEnabled(false); // Disable the button
                }
            }
        });
    }

    // Sets the cooling type details to be displayed on the view.
    public void setCoolingDetails(String type) {
        coolingTypeHeader.setText("Cooling Type: " + type);
    }

    // Shows a cooling recommendation dialog and handles its window closing event.
    private void showRecommendation() {
        recommendationFrame = new JFrame("Cooling Recommendation");
        recommendationFrame.setSize(300, 200);
        recommendationFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

        recommendationFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                recommendationFrame.dispose();
                frame.setVisible(true);
            }
        });

        // Handles the window closing event for the recommendation dialog.
        recommendationFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                recommendationFrame.dispose();
                frame.setVisible(true);
            }
        });

        // Sets up the recommendation panel and displays the recommendation text. Provides a "Go Back" button to return to the main frame.
        JPanel recommendationPanel = new JPanel();
        recommendationPanel.setLayout(new BoxLayout(recommendationPanel, BoxLayout.Y_AXIS));

        recommendationText = new JTextArea("We recommend water cooling for high-performance setups.", 5, 30);
        recommendationText.setEditable(false);
        recommendationText.setWrapStyleWord(true);
        recommendationText.setLineWrap(true);

        JButton goBackFromRecommendation = new JButton("Go Back");
        goBackFromRecommendation.addActionListener(e -> {
            recommendationFrame.dispose();
            frame.setVisible(true);
        });

        recommendationPanel.add(recommendationText);
        recommendationPanel.add(goBackFromRecommendation);
        recommendationFrame.add(recommendationPanel);
        recommendationFrame.setVisible(true);
        frame.setVisible(false);
    }

    // Sets up a table to display cooling information using the provided cooling list. The table is non-editable.
    public void setupCoolingTable(List<CoolingModel> coolingList) {
        String[] columnNames = {"ID", "Type"};
        Object[][] data = new Object[coolingList.size()][2];
        for (int i = 0; i < coolingList.size(); i++) {
            data[i][0] = coolingList.get(i).getId();
            data[i][1] = coolingList.get(i).getType();
        }
        DefaultTableModel tableModel = new DefaultTableModel(data, columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        coolingTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(coolingTable);
        panel.add(scrollPane);
        panel.revalidate();
        panel.repaint();
    }

}
