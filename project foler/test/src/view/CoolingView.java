/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package view;
import Model.CoolingModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/*
 * The `CoolingView` class represents the user interface for displaying cooling component details.
 * It contains components such as labels, buttons, and a table for presenting information to the user.
 * This class provides methods to set cooling details, display error messages, and show recommendations.
 *
 * @author kq635
 */
public class CoolingView extends BaseView {

    private static final int GO_BACK_BUTTON_X = 10;
    private static final int GO_BACK_BUTTON_Y = 10;
    private static final int GO_BACK_BUTTON_WIDTH = 45;
    private static final int GO_BACK_BUTTON_HEIGHT = 30;
    private static final int VERTICAL_SPACE = 40;
    private static final int RECOMMENDATION_FRAME_WIDTH = 300;
    private static final int RECOMMENDATION_FRAME_HEIGHT = 200;

    private JLabel coolingTypeHeader;
    private JButton fetchDetailsButton, recommendationButton;
    private JFrame recommendationFrame;
    private JTextArea recommendationText, infoText;
    private JTable coolingTable;
    private boolean fetched = false;

    /**
     * Constructs a `CoolingView` object and initializes the user interface.
     */
    public CoolingView() {
        super();
        initializeFrame("Cooling Details");
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        coolingTypeHeader = new JLabel("Cooling Type: ");
        infoText = new JTextArea("Cooling devices dissipate the heat generated by computer components.", 5, 30);
        infoText.setEditable(false);
        fetchDetailsButton = new JButton("Fetch Cooling Details");
        recommendationButton = new JButton("Show Recommendation");

        recommendationButton.addActionListener(e -> showRecommendation());
        goBackButton.setText("<");
        setComponentBounds(goBackButton, GO_BACK_BUTTON_X, GO_BACK_BUTTON_Y, GO_BACK_BUTTON_WIDTH, GO_BACK_BUTTON_HEIGHT);
        frame.add(goBackButton);

        addVerticalSpace(panel, VERTICAL_SPACE);
        panel.add(infoText);
        panel.add(coolingTypeHeader);
        panel.add(fetchDetailsButton);
        panel.add(recommendationButton);

        frame.add(panel);
        frame.setVisible(true);
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                frame.setVisible(false);
                goBackButton.doClick(); // Simulate a click on the go back button when closing the window
            }
        });
    }

    /**
     * Adds an ActionListener to the fetch details button.
     *
     * @param listener The ActionListener to be added.
     */
    public void addFetchDetailsButtonListener(ActionListener listener) {
        fetchDetailsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!fetched) { // Check if the button hasn't been pressed before
                    listener.actionPerformed(e); // Execute the listener
                    fetched = true; // Update the fetched state
                    fetchDetailsButton.setEnabled(false); // Disable the button
                }
            }
        });
    }

    /**
     * Sets the cooling type details displayed in the UI.
     *
     * @param type The cooling type to be displayed.
     */
    public void setCoolingDetails(String type) {
        coolingTypeHeader.setText("Cooling Type: " + type);
    }

    /**
     * Displays an error message dialog.
     *
     * @param message The error message to be displayed.
     */
    public void displayErrorMessage(String message) {
        JOptionPane.showMessageDialog(frame, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Shows a recommendation dialog.
     */
    private void showRecommendation() {
        recommendationFrame = new JFrame("Cooling Recommendation");
        recommendationFrame.setSize(RECOMMENDATION_FRAME_WIDTH, RECOMMENDATION_FRAME_HEIGHT);
        recommendationFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

        recommendationFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                recommendationFrame.dispose();
                frame.setVisible(true);
            }
        });

        JPanel recommendationPanel = new JPanel();
        recommendationPanel.setLayout(new BoxLayout(recommendationPanel, BoxLayout.Y_AXIS));

        recommendationText = new JTextArea("We recommend water cooling for high-performance setups.", 5, 30);
        recommendationText.setEditable(false);
        recommendationText.setWrapStyleWord(true);
        recommendationText.setLineWrap(true);

        JButton goBackFromRecommendation = new JButton("Go Back");
        goBackFromRecommendation.addActionListener(e -> {
            recommendationFrame.dispose();
            frame.setVisible(true);
        });

        recommendationPanel.add(recommendationText);
        recommendationPanel.add(goBackFromRecommendation);
        recommendationFrame.add(recommendationPanel);
        recommendationFrame.setVisible(true);
        frame.setVisible(false);
    }

    /**
     * Sets up the cooling table in the UI with data from the database.
     *
     * @param coolingList The list of cooling components to be displayed in the
     * table.
     */
    public void setupCoolingTable(List<CoolingModel> coolingList) {
        String[] columnNames = {"ID", "Type"};
        Object[][] data = new Object[coolingList.size()][2];
        for (int i = 0; i < coolingList.size(); i++) {
            data[i][0] = coolingList.get(i).getId();
            data[i][1] = coolingList.get(i).getType();
        }
        DefaultTableModel tableModel = new DefaultTableModel(data, columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        coolingTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(coolingTable);
        panel.add(scrollPane);
        panel.revalidate();
        panel.repaint();
    }
}
